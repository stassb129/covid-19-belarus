{"version":3,"sources":["redux/infected-reducer.js","redux/reducers.js","redux/store.js","components/ Chart/Chart.js","components/main/Home/Home.js","components/main/Home/HomeContainer.js","App.js","serviceWorker.js","index.js","components/main/Home/home.module.scss"],"names":["initialState","confirmed","deaths","recovered","date","infectedReducer","state","action","type","data","Confirmed","Deaths","Recovered","Date","reducers","combineReducers","infectedPage","store","createStore","Chart","props","dataSet","labels","datasets","label","backgroundColor","width","height","options","maintainAspectRatio","Home","className","css","logo","covid","statistic","stat","statBar","picture","axios","require","default","HomeContainer","get","then","response","length","console","log","init","catch","error","this","React","Component","connect","dispatch","initAC","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.dab56c64.chunk.js","sourcesContent":["export const INIT = 'INIT';\r\n\r\n\r\nconst initialState = {\r\n    confirmed: 0,\r\n    deaths: 0,\r\n    recovered: 0,\r\n    date: ''\r\n}\r\n\r\nconst infectedReducer = (state =initialState, action) => {\r\n    switch (action.type) {\r\n        case INIT:\r\n            return {...state,\r\n                confirmed: action.data.Confirmed,\r\n                deaths: action.data.Deaths,\r\n                recovered: action.data.Recovered,\r\n                date: action.data.Date\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initAC = (data) =>{\r\n    return{\r\n        type: INIT,\r\n        data: data\r\n    }\r\n}\r\n\r\n\r\nexport default infectedReducer;","import {combineReducers} from \"redux\";\r\nimport infectedReducer from \"./infected-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    infectedPage: infectedReducer,\r\n});\r\n\r\nexport default reducers;","import { createStore } from 'redux'\r\nimport reducers from './reducers'\r\n\r\nlet store = createStore(reducers)\r\n\r\nexport default store;","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\nconst Chart = (props) => {\r\n    let dataSet = {\r\n        labels: ['Confirmed', 'Deaths', 'Recovered'],\r\n        datasets:[\r\n            {\r\n                label: 'Confirmed Statistic',\r\n                data:[\r\n                    props.confirmed,\r\n                    props.deaths,\r\n                    props.recovered\r\n                ],\r\n                backgroundColor:[\r\n                    'rgba(225, 99, 132, 0.6)',\r\n                    'rgba(33, 33, 33, 0.6)',\r\n                    'rgba(76, 175, 80, 0.6)',\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <Bar data={dataSet}\r\n            width={100}\r\n            height={400}\r\n            options={{ maintainAspectRatio: false }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\nimport css from './home.module.scss';\r\nimport './../../../App.scss';\r\nimport classNames from 'classnames';\r\nimport Chart from \"../../ Chart/Chart\";\r\n\r\nconst Home = (props) => {\r\n\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"container\">\r\n\r\n                {/*Дата*/}\r\n                <div className={css.date}>\r\n                    <h4>{props.date}</h4>\r\n                </div>\r\n                {/*Лого*/}\r\n                <div className={css.logo}>\r\n                    <span>B</span>\r\n                    <span>E</span>\r\n                    <span>L</span>\r\n                    <span>A</span>\r\n                    <span>R</span>\r\n                    <span>U</span>\r\n                    <span>S</span>\r\n                </div>\r\n\r\n                <div className={css.covid}>\r\n                    <span>COVID-19</span>\r\n                </div>\r\n\r\n                {/*график*/}\r\n                <div className=\"chart\">\r\n                    <Chart\r\n                        confirmed={props.confirmed}\r\n                        deaths={props.deaths}\r\n                        recovered={props.recovered}/>\r\n                </div>\r\n\r\n                {/*Статистика*/}\r\n                <div className={css.statistic}>\r\n                    <div className={css.stat}>\r\n                        <div className={css.statBar}><span>Заражено: </span><span>{props.confirmed}</span></div>\r\n                        <div className={css.statBar}><span>Выздоровело: </span><span>{props.recovered}</span></div>\r\n                        <div className={css.statBar}><span>Смертей: </span><span>{props.deaths}</span></div>\r\n                    </div>\r\n                    <div className={css.picture}> </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import {connect} from \"react-redux\";\r\nimport Home from './Home';\r\nimport React from 'react';\r\nimport {initAC} from \"../../../redux/infected-reducer\";\r\n\r\nconst axios = require('axios').default;\r\n\r\n\r\nclass HomeContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        axios.get('https://api.covid19api.com/live/country/belarus/status/confirmed')\r\n            .then((response) => {\r\n                let data = response.data[response.data.length-1];\r\n                console.log(data);\r\n                this.props.init(data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <Home\r\n                    confirmed={this.props.confirmed}\r\n                    deaths={this.props.deaths}\r\n                    recovered={this.props.recovered}\r\n                    date={this.props.date}\r\n                />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        confirmed: state.infectedPage.confirmed,\r\n        deaths: state.infectedPage.deaths,\r\n        recovered: state.infectedPage.recovered,\r\n        date: state.infectedPage.date\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        init: (data) => {\r\n            dispatch(initAC(data))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeContainer);\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport {Provider} from 'react-redux'\r\nimport store from \"./redux/store\";\r\nimport HomeContainer from \"./components/main/Home/HomeContainer\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n                <div className=\"App\">\r\n                    <HomeContainer/>\r\n                </div>\r\n        </Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"date\":\"home_date__3LPjW\",\"logo\":\"home_logo__1HMtg\",\"covid\":\"home_covid__2gP7j\",\"statistic\":\"home_statistic__1uz9t\",\"picture\":\"home_picture__PMylT\",\"stat\":\"home_stat__2yVGT\",\"statBar\":\"home_statBar__2u5VU\"};"],"sourceRoot":""}